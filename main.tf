## --------------------------------------------------------------------------------------------------------------------
## GITHUB CONFIGURATION
## Define which Github repositories the Terraform blueprint user has access to
## 
## This optional configuration will submit a pull request to Github with the Terraform code generated by this blueprint
## after the user has completed the generation steps. This Terraform blueprint is functional without the Github
## integration, and the code may be downloaded after submission for review and deployment, as well as the historical 
## activity portion of the Iac catalog on AutoCloud.
##
## Before this feature can be enabled, you will need to integrate
## AutoCloud with your Github organization by deploying the AutoCloud Github application. For more information on this
## process, see https://docs.autocloud.io/integration-with-source-control-github.
##
## Once the integration is configured, uncomment the code block below, as well as the code block defining the git pull
## request parameters at the bottom of this file.
## --------------------------------------------------------------------------------------------------------------------

## ----- BEGIN GITHUB CONFIGURATION ----- ##
# data "autocloud_github_repos" "repos" {}

# locals {
#   # A list of Github repositories the user is allowed to submit Terraform code to, add specific repositories out of the
#   # repositories you have authorized AutoCloud to access to limit users to your infrastructure as code repositories. If
#   # you set these, uncomment the filter lines in the `dest_repos` definition on lines 20-23 below.
#   # 
#   # allowed_repos = [
#   #   "example",
#   # ]

#   # Destination repos where generated code will be submitted
#   dest_repos = [
#     for repo in data.autocloud_github_repos.repos.data[*].url : repo

#     # Uncomment if you have defined an allow list for your repos on lines 12-14 above.
#     #
#     # if anytrue([
#     #   for allowed_repo in local.allowed_repos: length(regexall(format("/%s", allowed_repo), repo)) > 0
#     # ])
#   ]
# }
## ----- END GITHUB CONFIGURATION ----- ##



## --------------------------------------------------------------------------------------------------------------------
## GLOBAL BLUEPRINT CONFIGURATION
## Define form questions the user will be shown which are either not associated with any Terraform module, or are shared
## between multiple Terraform modules.
## --------------------------------------------------------------------------------------------------------------------

data "autocloud_blueprint_config" "global" {
  ###
  # Hard code `enabled` to true to create all assets
  variable {
    name  = "enabled"
    value = true
  }

  ###
  # Set the namespace
  variable {
    name         = "namespace"
    display_name = "Namespace"
    helper_text  = "The organization namespace the assets will be deployed in"

    type = "shortText"

    value = "autocloud"
  }

  ###
  # Choose the environment
  variable {
    name         = "environment"
    display_name = "Environment"
    helper_text  = "The environment the assets will be deployed in"

    type = "radio"

    options {
      option {
        label   = "Sandbox"
        value   = "sandbox"
        checked = true
      }
      option {
        label = "Nonprod"
        value = "nonprod"
      }
      option {
        label = "Production"
        value = "production"
      }
    }
  }

  ###
  # Choose the layer
  variable {
    name         = "layer"
    display_name = "Layer"
    helper_text  = "The subnet layer the service will be deployed to"

    type = "radio"

    options {
      option {
        label = "Public"
        value = "public"
      }
      option {
        label   = "Application"
        value   = "app"
        checked = true
      }
      option {
        label = "Persistence"
        value = "persistence"
      }
    }
  }

  ###
  # Collect the name of the asset group
  variable {
    name         = "name"
    display_name = "Name"
    helper_text  = "The name of the service"

    type = "shortText"

    validation_rule {
      rule          = "isRequired"
      error_message = "You must provide a name for the service"
    }
  }
}



## --------------------------------------------------------------------------------------------------------------------
## AWS CONFIGURATION
## Define AWS specific elements that will be added to all assets, such as tags and tags
## between multiple Terraform modules.
## --------------------------------------------------------------------------------------------------------------------

data "autocloud_blueprint_config" "aws" {

  ###
  # Define full service name
  variable {
    name         = "full_service_name"
    display_name = "Full Service Name"
    helper_text  = "The full service name for the new service"

    type  = "shortText"
    value = "{{namespace}}-{{environment}}-{{name}}"
    variables = {
      namespace   = "global.variables.namespace"
      environment = "global.variables.environment"
      name        = "global.variables.name"
    }
  }

  ###
  # Collect tags to apply to assets
  variable {
    name         = "tags"
    display_name = "Tags"
    helper_text  = "A map of tags to apply to the deployed assets"

    type = "map"
  }
}



## --------------------------------------------------------------------------------------------------------------------
## LABEL MODULE
## Configure the label module used to create names
## --------------------------------------------------------------------------------------------------------------------

resource "autocloud_module" "label" {
  name    = "label"
  source  = "cloudposse/label/null"
  version = "0.25.0"
}

data "autocloud_blueprint_config" "label" {
  source = {
    global = data.autocloud_blueprint_config.global.blueprint_config,
    aws    = data.autocloud_blueprint_config.aws.blueprint_config,
    label  = autocloud_module.label.blueprint_config,
  }

  ###
  # Set the enabled flag
  variable {
    name  = "label.variables.enabled"
    value = "global.variables.enabled"
  }

  ###
  # Set the environment
  variable {
    name  = "label.variables.environment"
    value = "global.variables.environment"
  }

  ###
  # Set the name
  variable {
    name  = "label.variables.name"
    value = "global.variables.name"
  }

  ###
  # Set the namespace
  variable {
    name  = "label.variables.namespace"
    value = "global.variables.namespace"
  }

  ###
  # Set the tags
  variable {
    name  = "label.variables.tags"
    value = "aws.variables.tags"
  }
}



## --------------------------------------------------------------------------------------------------------------------
## CONTAINER DEFINITION
## Set the container defenition for the task
## --------------------------------------------------------------------------------------------------------------------
resource "autocloud_module" "container" {
  name    = "container"
  source  = "cloudposse/ecs-container-definition/aws"
  version = "0.60.0"
}

data "autocloud_blueprint_config" "container" {
  source = {
    global    = data.autocloud_blueprint_config.global.blueprint_config,
    aws       = data.autocloud_blueprint_config.aws.blueprint_config,
    container = autocloud_module.container.blueprint_config,
  }

  omit_variables = [
    "container.variables.command",
    "container.variables.container_cpu",
    "container.variables.container_definition",
    "container.variables.container_depends_on",
    "container.variables.container_memory",
    "container.variables.container_memory_reservation",
    "container.variables.disable_networking",
    "container.variables.dns_search_domains",
    "container.variables.dns_servers",
    "container.variables.docker_labels",
    "container.variables.docker_security_options",
    "container.variables.entrypoint",
    "container.variables.environment",
    "container.variables.environment_files",
    "container.variables.essential",
    "container.variables.extra_hosts",
    "container.variables.firelens_configuration",
    "container.variables.healthcheck",
    "container.variables.hostname",
    "container.variables.interactive",
    "container.variables.links",
    "container.variables.linux_parameters",
    "container.variables.map_environment",
    "container.variables.map_secrets",
    "container.variables.mount_points",
    "container.variables.privileged",
    "container.variables.pseudo_terminal",
    "container.variables.repository_credentials",
    "container.variables.resource_requirements",
    "container.variables.secrets",
    "container.variables.start_timeout",
    "container.variables.stop_timeout",
    "container.variables.system_controls",
    "container.variables.ulimits",
    "container.variables.user",
    "container.variables.volumes_from",
    "container.variables.working_directory",
  ]

  variable {
    name         = "container.variables.container_image"
    display_name = "Container Image"
    helper_text  = "The docker image to use for the service, such as `nginx:1.25-alpine`"
  }

  variable {
    name  = "container.variables.container_name"
    value = "{{namespace}}-{{environment}}-{{name}}"
    variables = {
      namespace   = "global.variables.namespace",
      environment = "global.variables.environment",
      name        = "global.variables.name",
    }
  }

  variable {
    name  = "container.variables.log_configuration"
    type  = "raw"
    value = <<-EOT
      {
        logDriver = "awslogs"
        options = {
          awslogs-group = format(
            "/%s/%s/ecs/%s/%s",
            "{{namespace}}",
            "{{environment}}",
            "{{namespace}}-{{environment}}-example",
            {{service_name}}
          )
          awslogs-region       = data.aws_region.current.name,
          awslogs-create-group = true,
          awslogs-stream-prefix = {{service_name}}
        }
      }
      EOT
    variables = {
      namespace    = "global.variables.namespace",
      environment  = "global.variables.environment",
      name         = "global.variables.name",
      service_name = autocloud_module.label.outputs["id"]
    }
  }

  variable {
    name  = "container.variables.port_mappings"
    type  = "raw"
    value = <<-EOT
      [
        {
          containerPort = 80
          hostPort      = 80
          protocol      = "tcp"
        }
      ]
      EOT
  }

  variable {
    name  = "container.variables.readonly_root_filesystem"
    value = false
  }
}



## --------------------------------------------------------------------------------------------------------------------
## SERVICE & TASK DEFINITION
## Set the service and task definitions for the service
## --------------------------------------------------------------------------------------------------------------------

resource "autocloud_module" "service" {
  name    = "service"
  source  = "cloudposse/ecs-alb-service-task/aws"
  version = "0.71.0"
}

data "autocloud_blueprint_config" "service" {
  source = {
    global  = data.autocloud_blueprint_config.global.blueprint_config,
    aws     = data.autocloud_blueprint_config.aws.blueprint_config,
    service = autocloud_module.service.blueprint_config,
  }

  omit_variables = [
    "service.variables.alb_security_group",
    "service.variables.bind_mount_volumes",
    "service.variables.capacity_provider_strategies",
    "service.variables.circuit_breaker_deployment_enabled",
    "service.variables.circuit_breaker_rollback_enabled",
    "service.variables.container_port",
    "service.variables.deployment_controller_type",
    "service.variables.deployment_maximum_percent",
    "service.variables.deployment_minimum_healthy_percent",
    "service.variables.docker_volumes",
    "service.variables.ecs_load_balancers",
    "service.variables.ecs_service_enabled",
    "service.variables.efs_volumes",
    "service.variables.enable_ecs_managed_tags",
    "service.variables.enable_icmp_rule",
    "service.variables.ephemeral_storage_size",
    "service.variables.exec_enabled",
    "service.variables.fsx_volumes",
    "service.variables.health_check_grace_period_seconds",
    "service.variables.ignore_changes_desired_count",
    "service.variables.ipc_mode",
    "service.variables.nlb_cidr_blocks",
    "service.variables.nlb_container_port",
    "service.variables.ordered_placement_strategy",
    "service.variables.permissions_boundary",
    "service.variables.pid_mode",
    "service.variables.platform_version",
    "service.variables.proxy_configuration",
    "service.variables.role_tags_enabled",
    "service.variables.runtime_platform",
    "service.variables.scheduling_strategy",
    "service.variables.security_group_description",
    "service.variables.security_group_enabled",
    "service.variables.security_group_ids",
    "service.variables.service_placement_constraints",
    "service.variables.service_registries",
    "service.variables.service_role_arn",
    "service.variables.task_cpu",
    "service.variables.task_definition",
    "service.variables.task_exec_policy_arns",
    "service.variables.task_exec_role_arn",
    "service.variables.task_memory",
    "service.variables.task_placement_constraints",
    "service.variables.task_policy_arns_map",
    "service.variables.task_role_arn",
    "service.variables.use_alb_security_group",
    "service.variables.use_nlb_cidr_blocks",
    "service.variables.use_old_arn",
    "service.variables.wait_for_steady_state",
  ]

  variable {
    name         = "service.variables.assign_public_ip"
    display_name = "Assign Public IP Address"
    helper_text  = "Whether or not a public IP address will be assigned to the service based on target network layer"

    conditional {
      source    = "global.variables.layer"
      condition = "public"
      content {
        value = true
      }
    }

    conditional {
      source    = "global.variables.layer"
      condition = "persistence"
      content {
        value = false
      }
    }

    conditional {
      source    = "global.variables.layer"
      condition = "app"
      content {
        value = false
      }
    }
  }

  variable {
    name  = "service.variables.container_definition_json"
    value = autocloud_module.container.outputs["json_map_encoded_list"]
  }

  variable {
    name  = "service.variables.context"
    value = autocloud_module.label.outputs["context"]
  }

  variable {
    name  = "service.variables.desired_count"
    value = 1
  }

  variable {
    name  = "service.variables.ecs_cluster_arn"
    type  = "raw"
    value = "data.aws_ecs_cluster.this.arn"
  }

  # Will be handled by security group module
  variable {
    name  = "service.variables.enable_all_egress_rule"
    value = false
  }

  variable {
    name  = "service.variables.force_new_deployment"
    value = true
  }

  variable {
    name  = "service.variables.ignore_changes_task_definition"
    value = false
  }

  variable {
    name  = "service.variables.launch_type"
    value = "FARGATE"
  }

  variable {
    name  = "service.variables.network_mode"
    value = "awsvpc"
  }

  variable {
    name  = "service.variables.propagate_tags"
    value = "SERVICE"
  }

  variable {
    name  = "service.variables.redeploy_on_apply"
    value = true
  }

  variable {
    name  = "service.variables.subnet_ids"
    type  = "raw"
    value = "data.aws_subnets.this.ids"
  }

  variable {
    name  = "service.variables.subnet_ids"
    type  = "raw"
    value = "data.aws_subnets.this.ids"
  }

  variable {
    name  = "service.variables.task_exec_policy_arns_map"
    type  = "raw"
    value = "{ {{namespace}}-{{environment}}-{{name}} = {{policy_arn}} }"
    variables = {
      namespace   = "global.variables.namespace",
      environment = "global.variables.environment",
      name        = "global.variables.name",
      policy_arn  = autocloud_module.iam.outputs["policy_arn"]
    }
  }

  variable {
    name  = "service.variables.task_policy_arns"
    type  = "raw"
    value = "[{{policy_arn}}]"
    variables = {
      policy_arn = autocloud_module.iam.outputs["policy_arn"]
    }
  }

  variable {
    name  = "service.variables.vpc_id"
    type  = "raw"
    value = "data.aws_vpc.this.id"
  }
}



## --------------------------------------------------------------------------------------------------------------------
## IAM POLICY
## Define the IAM policy for the service
## --------------------------------------------------------------------------------------------------------------------

resource "autocloud_module" "iam" {
  name    = "iam"
  source  = "cloudposse/iam-policy/aws"
  version = "0.4.0"
}

data "autocloud_blueprint_config" "iam" {
  source = {
    global = data.autocloud_blueprint_config.global.blueprint_config,
    aws    = data.autocloud_blueprint_config.aws.blueprint_config,
    iam    = autocloud_module.iam.blueprint_config,
  }

  omit_variables = [
    "iam.variables.iam_override_policy_documents",
    "iam.variables.iam_policy_id",
    "iam.variables.iam_policy_statements",
    "iam.variables.iam_policy",
    "iam.variables.iam_source_json_url",
  ]

  variable {
    name  = "iam.variables.context"
    value = autocloud_module.label.outputs["context"]
  }


  variable {
    name  = "iam.variables.description"
    value = "Access policy for ECS Fargate service {{namespace}}-{{environment}}-{{name}}"
    variables = {
      namespace   = "global.variables.namespace"
      environment = "global.variables.environment"
      name        = "global.variables.name"
    }
  }

  variable {
    name  = "iam.variables.iam_policy_enabled"
    value = true
  }

  variable {
    name = "iam.variables.iam_source_policy_documents"
    type = "raw"
    # Raw value must be properly string escped. See https://developer.hashicorp.com/terraform/language/expressions/strings#escape-sequences
    value = "[templatefile(\"$${path.module}/templates/json/iam_policy.json.tftpl\", {})]"
  }
}


## --------------------------------------------------------------------------------------------------------------------
## SECURITY GROUP
## Define the security group rules
## --------------------------------------------------------------------------------------------------------------------

resource "autocloud_module" "sg" {
  name    = "sg"
  source  = "cloudposse/security-group/aws"
  version = "2.2.0"
}

data "autocloud_blueprint_config" "sg" {
  source = {
    global = data.autocloud_blueprint_config.global.blueprint_config,
    aws    = data.autocloud_blueprint_config.aws.blueprint_config,
    sg     = autocloud_module.sg.blueprint_config,
  }

  omit_variables = [
    "sg.variables.allow_all_egress",
    "sg.variables.create_before_destroy",
    "sg.variables.inline_rules_enabled",
    "sg.variables.revoke_rules_on_delete",
    "sg.variables.rule_matrix",
    "sg.variables.rules",
    "sg.variables.rules_map",
    "sg.variables.security_group_create_timeout",
    "sg.variables.security_group_delete_timeout",
    "sg.variables.security_group_name",
    "sg.variables.target_security_group_id",
  ]

  variable {
    name  = "sg.variables.context"
    value = autocloud_module.label.outputs["context"]
  }

  variable {
    name  = "sg.variables.rules"
    type  = "raw"
    value = <<-EOT
      [
        {
          key         = "service port"
          type        = "ingress"
          from_port   = 80
          to_port     = 80
          protocol    = "tcp"
          cidr_blocks = ["{{allowed_cidr}}"]
          description = "Allow traffic to service port"
          self        = false
        },
        {
          key         = "internal"
          type        = "ingress"
          from_port   = 0
          to_port     = 0
          protocol    = "-1"
          cidr_blocks = []
          description = "Allow all internal traffic"
          self        = true
        }
      ]
      EOT
    variables = {
      allowed_cidr = "0.0.0.0/0"
    }
  }



  variable {
    name  = "sg.variables.security_group_description"
    value = "Access control for ECS Fargate service {{namespace}}-{{environment}}-{{name}}"
    variables = {
      namespace   = "global.variables.namespace"
      environment = "global.variables.environment"
      name        = "global.variables.name"
    }
  }

  variable {
    name  = "sg.variables.target_security_group_id"
    type  = "raw"
    value = "[{{security_group_id}}]"
    variables = {
      security_group_id = autocloud_module.service.outputs["service_security_group_id"]
    }
  }

  variable {
    name  = "sg.variables.vpc_id"
    type  = "raw"
    value = "data.aws_vpc.this.id"
  }
}



## --------------------------------------------------------------------------------------------------------------------
## COMPLETE BLUEPRINT CONFIGURATION
## Combine all the defined Terraform blueprint configurations into the complete blueprint configuration that will be used
## to create the form shown to the end user.
## --------------------------------------------------------------------------------------------------------------------

data "autocloud_blueprint_config" "complete" {
  source = {
    global    = data.autocloud_blueprint_config.global.blueprint_config,
    aws       = data.autocloud_blueprint_config.aws.blueprint_config,
    label     = data.autocloud_blueprint_config.label.blueprint_config,
    container = data.autocloud_blueprint_config.container.blueprint_config,
    service   = data.autocloud_blueprint_config.service.blueprint_config,
    iam       = data.autocloud_blueprint_config.iam.blueprint_config,
    sg        = data.autocloud_blueprint_config.sg.blueprint_config,
  }

  ###
  # Hide variables from user
  omit_variables = [
    ###
    # Global

    # Use defaults in the module (don't collect)
    "additional_tag_map",
    "attributes",
    "context",
    "delimiter",
    "descriptor_formats",
    "id_length_limit",
    "label_key_case",
    "label_order",
    "label_value_case",
    "labels_as_tags",
    "regex_replace_chars",
    "stage",
    "tenant",

    # Defined values
    "enabled",

    ###
    # Label
    "label.variables.environment",
    "label.variables.name",
    "label.variables.namespace",
    "label.variables.tags",

    ###
    # Container Definition
    "container.variables.container_name",
    "container.variables.readonly_root_filesystem",

    ###
    # Service & Task
    "service.variables.container_definition_json",
    "service.variables.desired_count",
    "service.variables.ecs_cluster_arn",
    "service.variables.enable_all_egress_rule",
    "service.variables.environment",
    "service.variables.force_new_deployment",
    "service.variables.ignore_changes_task_definition",
    "service.variables.launch_type",
    "service.variables.name",
    "service.variables.namespace",
    "service.variables.network_mode",
    "service.variables.propagate_tags",
    "service.variables.redeploy_on_apply",
    "service.variables.subnet_ids",
    "service.variables.tags",
    "service.variables.task_exec_policy_arns_map",
    "service.variables.task_policy_arns",
    "service.variables.vpc_id",

    ###
    # IAM Policy
    "iam.variables.context",
    "iam.variables.description",
    "iam.variables.environment",
    "iam.variables.iam_policy_enabled",
    "iam.variables.iam_source_policy_documents",
    "iam.variables.name",
    "iam.variables.namespace",
    "iam.variables.tags",

    ###
    # Security Group
    "sg.variables.environment",
    "sg.variables.name",
    "sg.variables.namespace",
    "sg.variables.preserve_security_group_id",
    "sg.variables.security_group_description",
    "sg.variables.tags",
  ]



  ###
  # Set the order in which the variables are displayed to the user
  display_order {
    priority = 0
    values = [
      "global.variables.namespace",
      "global.variables.environment",
      "global.variables.name",
      "aws.variables.full_service_name",
      "container.variables.container_image",
      "global.variables.layer",
      "service.variables.assign_public_ip",
      "aws.variables.tags",
    ]
  }
}



## --------------------------------------------------------------------------------------------------------------------
## AUTOCLOUD BLUEPRINT
## Create the AutoCloud Terraform blueprint using the modules and blueprint configurations defined above. 
## --------------------------------------------------------------------------------------------------------------------

resource "autocloud_blueprint" "this" {
  name = "[Example] ECS Fargate Service"

  ###
  # UI Configuration
  #
  author       = "chris@autocloud.dev"
  description  = "Deploy an ECS service targeting fargate to an AWS account."
  instructions = <<-EOT
    To deploy this generator, these simple steps:

      * step 1: Choose the target environment
      * step 2: Provide a name to identify assets
      * step 3: Add tags to apply to assets
    EOT

  labels = ["aws"]



  ###
  # Form configuration
  config = data.autocloud_blueprint_config.complete.config


  ###
  # versions.tf
  file {
    action = "CREATE"
    variables = {
      namespace   = data.autocloud_blueprint_config.complete.variables["namespace"]
      environment = data.autocloud_blueprint_config.complete.variables["environment"]
      name        = data.autocloud_blueprint_config.complete.variables["name"]
    }

    destination = "{{namespace}}-{{environment}}-{{name}}/versions.tf"

    content = file("./templates/tf/versions.tf.tpl")

  }

  ###
  # IAM policy
  file {
    action = "CREATE"
    variables = {
      namespace   = data.autocloud_blueprint_config.complete.variables["namespace"]
      environment = data.autocloud_blueprint_config.complete.variables["environment"]
      name        = data.autocloud_blueprint_config.complete.variables["name"]
    }

    destination = "{{namespace}}-{{environment}}-{{name}}/templates/json/iam_policy.json.tftpl"

    content = file("./templates/json/iam_policy.json.tftpl.tpl")

  }

  ###
  # main.tf
  file {
    action      = "CREATE"
    destination = "{{namespace}}-{{environment}}-{{name}}/main.tf"
    variables = {
      namespace   = data.autocloud_blueprint_config.complete.variables["namespace"]
      environment = data.autocloud_blueprint_config.complete.variables["environment"]
      name        = data.autocloud_blueprint_config.complete.variables["name"]
      layer       = data.autocloud_blueprint_config.complete.variables["layer"]
    }

    ###
    # Add version requirements and provider configuration to the top of the output file. See ./files/provider_config.hcl.tpl
    # for content to be added.
    header = file("./templates/tf/header.tf.tpl")

    modules = [
      autocloud_module.label.name,
      autocloud_module.container.name,
      autocloud_module.service.name,
      autocloud_module.iam.name,
      autocloud_module.sg.name,
    ]
  }

  ## --------------------------------------------------------------------------------------------------------------------
  ## GITHUB PULL REQUEST CONFIGURATION
  ## Define the Github pull request content
  ## 
  ## This optional configuration will submit a pull request to Github with the Terraform code generated by this blueprint
  ## after the user has completed the generation steps. This Terraform blueprint is functional without the Github
  ## integration, and the code may be downloaded after submission for review and deployment, as well as the historical 
  ## activity portion of the Iac catalog on AutoCloud.
  ##
  ## Before this feature can be enabled, you will need to integrate
  ## AutoCloud with your Github organization by deploying the AutoCloud Github application. For more information on this
  ## process, see https://docs.autocloud.io/integration-with-source-control-github.
  ##
  ## Once the integration is configured, uncomment the code block below, as well as the code block defining the repository
  ## access parameters at the top of this file.
  ## --------------------------------------------------------------------------------------------------------------------

  ## ----- BEGIN GITHUB CONFIGURATION ----- ##

  ###
  # Destination repository git configuraiton
  #

  # git_config {
  #   destination_branch = "main"

  #   git_url_options = local.dest_repos
  #   git_url_default = length(local.dest_repos) != 0 ? local.dest_repos[0] : "" # Choose the first in the list by default

  #   pull_request {
  #     title                   = "[AutoCloud] new KMS Encrypted S3 Bucket {{namespace}}-{{environment}}-{{name}}, created by {{authorName}}"
  #     commit_message_template = "[AutoCloud] new KMS Encrypted S3 Bucket {{namespace}}-{{environment}}-{{name}}, created by {{authorName}}"
  #     body                    = file("./files/pull_request.md.tpl")
  #     variables = {
  #       authorName  = "generic.authorName"
  #       namespace   = data.autocloud_blueprint_config.complete.variables["namespace"]
  #       environment = data.autocloud_blueprint_config.complete.variables["environment"]
  #       name        = data.autocloud_blueprint_config.complete.variables["name"]
  #     }
  #   }
  # }

  ## ----- END GITHUB CONFIGURATION ----- ##
}
